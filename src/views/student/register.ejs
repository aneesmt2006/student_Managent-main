<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>User Registration</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <style>
    body {
      background-color: #f0f8ff;
      font-family: 'Arial', sans-serif;
    }
    .form-container {
      max-width: 600px;
      margin: 100px auto;
      padding: 40px;
      background-color: #fff;
      border-radius: 10px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
    .form-container h2 {
      text-align: center;
      margin-bottom: 30px;
      color: #4e73df;
    }
    .form-label {
      font-weight: bold;
    }
    .btn-primary {
      width: 100%;
      padding: 10px;
      background-color: #4e73df;
      border-color: #4e73df;
    }
    .btn-primary:hover {
      background-color: #3b5fd1;
      border-color: #3b5fd1;
    }
    .form-control:focus {
      border-color: #4e73df;
      box-shadow: 0 0 8px rgba(78, 115, 223, 0.5);
    }
    .form-control {
      border-radius: 5px;
    }
    .error-message {
      color: red;
      font-size: 0.875rem;
      margin-top: -10px;
      margin-bottom: 10px;
    }
  </style>
</head>
<body>
  <script>
    var successMessage = '<%= success_msg %>';
    var errorMessage = '<%= error_msg %>';

    if (successMessage) {
      Swal.fire({
        toast: true,
        icon: 'success',
        title: successMessage,
        position: 'top',
        showConfirmButton: false,
        timer: 3000,
        timerProgressBar: true,
        didOpen: (toast) => {
          toast.addEventListener('mouseenter', Swal.stopTimer);
          toast.addEventListener('mouseleave', Swal.resumeTimer);
        }
      });
    }
    if (errorMessage) {
      Swal.fire({
        toast: true,
        icon: 'warning',
        title: errorMessage,
        position: 'top',
        showConfirmButton: false,
        timer: 3000,
        timerProgressBar: true,
        didOpen: (toast) => {
          toast.addEventListener('mouseenter', Swal.stopTimer);
          toast.addEventListener('mouseleave', Swal.resumeTimer);
        }
      });
    }

    function validateForm(event) {
      event.preventDefault();

      const name = document.getElementById('name');
      const email = document.getElementById('email');
      const userClass = document.getElementById('class');
      const password = document.getElementById('password');
      const rollNo = document.getElementById('roleno');

      let isValid = true;

      const nameRegex = /^[a-zA-Z ]+$/;

      if (!name.value.trim()) {
        setError(name, 'Name is required.');
        isValid = false;
      } else if (!nameRegex.test(name.value)) {
        setError(name, 'Name must contain only letters and spaces.');
        isValid = false;
      } else {
        clearError(name);
      }

      if (!email.value.trim() || !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email.value)) {
        setError(email, 'Valid email is required.');
        isValid = false;
      } else {
        clearError(email);
      }

      if (!userClass.value.trim() || isNaN(userClass.value) || userClass.value <= 0) {
        setError(userClass, 'Class must be a positive number.');
        isValid = false;
      } else {
        clearError(userClass);
      }

      if (!password.value.trim() || password.value.length < 4) {
        setError(password, 'Password must be at least 4 characters.');
        isValid = false;
      } else {
        clearError(password);
      }

      if (!rollNo.value.trim() || isNaN(rollNo.value) || rollNo.value <= 0) {
        setError(rollNo, 'Roll Number must be a positive number.');
        isValid = false;
      } else {
        clearError(rollNo);
      }

      if (isValid) {
        event.target.submit();
      }
    }

    function setError(element, message) {
      const parent = element.parentElement;
      let errorElement = parent.querySelector('.error-message');
      if (!errorElement) {
        errorElement = document.createElement('div');
        errorElement.classList.add('error-message');
        parent.insertBefore(errorElement, element);
      }
      errorElement.textContent = message;
      element.classList.add('is-invalid');
    }

    function clearError(element) {
      const parent = element.parentElement;
      const errorElement = parent.querySelector('.error-message');
      if (errorElement) {
        errorElement.remove();
      }
      element.classList.remove('is-invalid');
    }
  </script>
<div class="container">
  <div class="form-container">
    <h2>User Registration</h2>
    <form action="/register" method="POST" onsubmit="validateForm(event)">
      <div class="mb-3">
        <label for="name" class="form-label">Name</label>
        <input type="text" class="form-control" id="name" name="name" required>
      </div>

      <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <input type="email" class="form-control" id="email" name="email" required>
      </div>

      <div class="mb-3">
        <label for="class" class="form-label">Class</label>
        <input type="number" class="form-control" id="class" name="class" required>
      </div>

      <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <input type="password" class="form-control" id="password" name="password" required>
      </div>

      <div class="mb-3">
        <label for="roleno" class="form-label">Roll Number</label>
        <input type="number" class="form-control" id="roleno" name="roleno" required>
      </div>

      <button type="submit" class="btn btn-primary">Submit</button>
    </form>
    <div class="text-center mt-3">
        <a href="/" class="text-decoration-none">login</a>
    </div>
  </div>
</div>

<!-- Bootstrap JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
